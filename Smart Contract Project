// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

contract DrivingLicenseEligibility {

    mapping(address => uint) public age;                                             //to store the age of the user
    mapping(address => bool) public ownsVehicle;                                     //to store whether the user owns a vehicle


                                                                                   
    function setAge(uint _age) public {                                              //to set the age of user 
        require(_age > 0 && _age < 100, "Invalid age.");                             //using "require" for valid age
        age[msg.sender] = _age;                                                      //set age for address of sender
    }

    function setVehicleOwnership(bool _ownsVehicle) public {                         //to set ownership of vehicle of the user
        ownsVehicle[msg.sender] = _ownsVehicle;                                      //set ownership of vehicle for adress of sender
    }

    function checkEligibility() public view returns (bool) {                         //checking eligibility for driving license
        uint userAge = age[msg.sender];                                              
        bool vehicleOwnership = ownsVehicle[msg.sender];

        require(userAge > 0, "Age is not set. Please set your age first.");          //using "require" to check age is set
        require(vehicleOwnership, "Vehicle ownership status is not set or you don't own a vehicle.");           //to check vehicle ownership status

        if (userAge < 18) {                                                          //if user is eligible for driving license
            revert("You are not eligible for a driving license.");                   //using revert if user is not eligible
        }
        assert (vehicleOwnership == true);                                           //using assert 

        return true;                                                                 //eligibility in boolean form
    }
}
